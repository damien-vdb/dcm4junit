name: Release

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version (e.g., 1.0.0)'
        required: true

      next-version:
        description: 'Next development version (e.g., 1.1.0-SNAPSHOT)'
        required: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Verify versions
        run: |
          # Verify that both versions follow semver X.Y.Z(-SNAPSHOT)?
          if [[ ! "${{ github.event.inputs.release-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Release version '${{ github.event.inputs.release-version }}' does not follow the expected format X.Y.Z"
            exit 1
          fi

          if [[ ! "${{ github.event.inputs.next-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-SNAPSHOT$ ]]; then
            echo "Next development version '${{ github.event.inputs.next-version }}' does not follow the expected format X.Y.Z-SNAPSHOT"
            exit 1
          fi

      # Checkout with a key that can bypass some rulesets
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.JRELEASER_DEPLOY_KEY }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Set up Git identity
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Set version and release
        run: |
          # Update version in gradle.properties
          sed -i "s/^version=.*/version=${{ github.event.inputs.release-version }}/" gradle.properties
          
          # Build and publish to local staging repository
          ./gradlew clean build publish
          
          # Commit and tag the release
          git add gradle.properties
          git commit -m "Release ${{ github.event.inputs.release-version }}"

      - name: Run JReleaser
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          ./gradlew jreleaserFullRelease

      - name: Update to next development version
        run: |
          # Update to next development version
          sed -i "s/^version=.*/version=${{ github.event.inputs.next-version }}/" gradle.properties
          
          # Commit the version update
          git add gradle.properties
          git commit -m "Prepare next development version: ${{ github.event.inputs.next-version }}"
          git push

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
